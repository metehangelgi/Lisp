(define (even? n)
  (= (remainder n 2) 0))


(define fast-expi (lambda (a b)
                    (fast-expi-helper (a b 1))))

(define fast-expi-helper (lambda (a b prod)
                           (cond ((= b 0) prod)
                                 ((even? b) (fast-expi-helper a (/ b 2) (* prod prod ))
                                 (else fast-expi-helper a (- b 1) (* prod b))))))


;


(define (even? n)
  (= (remainder n 2) 0))


(define fast-expi (lambda (a b)
                    (fast-expi-helper (a b 1))))

(define (even? n)
  (= (remainder n 2) 0))


(define fast-expi (lambda (a b)
                    (fast-expi-helper (a b 1))))

(define fast-expi-helper (lambda (a b prod)
                           (cond ((= b 0) prod)
                                 ((even? b) (square (fast-expi-helper a (/ b 2))))
                                 (else fast-expi-helper a (- b 1) (* prod b)))))