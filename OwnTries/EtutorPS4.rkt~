
(define make-increasing-matrix
  (lambda (rows cols start)
    (make-increasing-list rows cols start (list))
    ))



;(define (make-increasing-list rows cols start lst)
 
 ;)

;(make-increasing-matrix 3 4 10)








(#%require racket)
(define nil empty) 

(cons 1 (cons 2 (cons 3 nil)))



(define make-increasing-matrix
  (lambda (rows cols start)
    (if (= rows 0) nil
        (cons (make-increasing-list cols start) (make-increasing-matrix (- rows 1) cols (+ start cols)))
        )))

(define (make-increasing-list cols start)
  (if (= cols 0) nil
      (cons start (make-increasing-list (- cols 1) (+ start 1)))))

(make-increasing-matrix 3 5 10)
(make-increasing-matrix 5 5 10)

(define (contains? list elt)
  (cond ((null? list) #f)
        ((equal? elt (car list)) #t)
        (else (contains? (cdr list) elt))))









(define subset?
  (lambda (lst1 lst2)
    (cond ((null? lst1) #t)
          ((contains? lst2 (car lst1)) (subset? (cdr lst1) lst2))
          (else #f))))


(subset? nil (list 1 2 3))
(subset? (list 2 3) (list 1 2 3))

(subset? (list 2 3 4) (list 1 2 3))

(cons 6 nil)


(define thing (cons (cons 1 (cons 2 nil)) (cons (cons 3 4) nil)))

(cdr thing)


(define thing (cons (cons 'a nil) (cons 'b (cons 'c nil))))

thing


(define contains?
  (lambda (lst elt)
    (cond ((null? lst) #f)
          ((equal? (car lst) elt) #t)
          (else (contains? (cdr lst) elt)))))


(contains? (list 1 2 3) 3)
(contains? (list 1 2 3) 4)
(contains? nil 3)


(min-list '()) => 999999999999
  (min-list (list 1 2 3)) => 1
  (min-list (list -100 -1000 -10000)) => -10000
  (min-list (list 1 1 1 1 1 1) => 1


